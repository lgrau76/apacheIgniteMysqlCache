package config;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;
import java.io.InputStream;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.cache.configuration.Factory;
import javax.sql.DataSource;
import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory;
import org.apache.ignite.cache.store.jdbc.JdbcType;
import org.apache.ignite.cache.store.jdbc.JdbcTypeField;
import org.apache.ignite.cache.store.jdbc.dialect.MySQLDialect;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder;

/** This file was generated by Ignite Web Console (05/11/2019, 11:14) **/
public class ServerConfigurationFactory {
    /** Secret properties loading. **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("secret.properties")) {
            props.load(in);
        }
        catch (Exception ignored) {
            // No-op.
        }
    }

    /** Helper class for datasource creation. **/
    public static class DataSources {
        public static final MysqlDataSource INSTANCE_dsMySQL_Backcsrpbase = createdsMySQL_Backcsrpbase();

        private static MysqlDataSource createdsMySQL_Backcsrpbase() {
            MysqlDataSource dsMySQL_Backcsrpbase = new MysqlDataSource();

            dsMySQL_Backcsrpbase.setURL(props.getProperty("dsMySQL_Backcsrpbase.jdbc.url"));
            dsMySQL_Backcsrpbase.setUser(props.getProperty("dsMySQL_Backcsrpbase.jdbc.username"));
            dsMySQL_Backcsrpbase.setPassword(props.getProperty("dsMySQL_Backcsrpbase.jdbc.password"));

            return dsMySQL_Backcsrpbase;
        }
    }

    /**
     * Configure grid.
     * 
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setIgniteInstanceName("Cluster1");

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();

        TcpDiscoveryMulticastIpFinder ipFinder = new TcpDiscoveryMulticastIpFinder();

        ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47510"));

        discovery.setIpFinder(ipFinder);

        cfg.setDiscoverySpi(discovery);

        cfg.setCacheConfiguration(cacheFlight2010Cache());

        return cfg;
    }

    /**
     * Create configuration for cache "Flight2010Cache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheFlight2010Cache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("Flight2010Cache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsMySQL_Backcsrpbase;
            };
        });

        cacheStoreFactory.setDialect(new MySQLDialect());

        cacheStoreFactory.setTypes(jdbcTypeFlight2010(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("com.snopsys.lgrau.model.Flight2010Key");
        qryEntity.setValueType("com.snopsys.lgrau.model.Flight2010");

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("destCountryName", "java.lang.String");
        fields.put("originCountryName", "java.lang.String");
        fields.put("count", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("destCountryName", "DEST_COUNTRY_NAME");
        aliases.put("originCountryName", "ORIGIN_COUNTRY_NAME");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeFlight2010".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeFlight2010(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType("com.snopsys.lgrau.model.Flight2010Key");
        type.setValueType("com.snopsys.lgrau.model.Flight2010");
        type.setDatabaseSchema("backcsrpbase");
        type.setDatabaseTable("flight2010");

        type.setValueFields(
            new JdbcTypeField(Types.LONGVARCHAR, "DEST_COUNTRY_NAME", String.class, "destCountryName"),
            new JdbcTypeField(Types.LONGVARCHAR, "ORIGIN_COUNTRY_NAME", String.class, "originCountryName"),
            new JdbcTypeField(Types.INTEGER, "count", Integer.class, "count")
        );

        return type;
    }
}